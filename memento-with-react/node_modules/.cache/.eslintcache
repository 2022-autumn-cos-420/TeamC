[{"/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/index.js":"1","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/App.js":"2","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/reportWebVitals.js":"3","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/HomePage.js":"4","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/CollectPage.js":"5","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/QuizPage.js":"6","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/ImportPage.js":"7","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/DecksPage.js":"8","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/components/Flashcard.js":"9","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/components/Parsecard.js":"10","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/components/Colltab.js":"11","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/components/Deckcard.js":"12","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/components/Importcard.jsx":"13","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/components/Exportcard.jsx":"14","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/utils.js":"15","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/importExport.js":"16"},{"size":535,"mtime":1669789114283,"results":"17","hashOfConfig":"18"},{"size":6870,"mtime":1669797176498,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1669789114911,"results":"20","hashOfConfig":"18"},{"size":5903,"mtime":1669789114283,"results":"21","hashOfConfig":"18"},{"size":6910,"mtime":1669794999323,"results":"22","hashOfConfig":"18"},{"size":3843,"mtime":1669789114283,"results":"23","hashOfConfig":"18"},{"size":560,"mtime":1669792881084,"results":"24","hashOfConfig":"18"},{"size":5569,"mtime":1669789114283,"results":"25","hashOfConfig":"18"},{"size":3926,"mtime":1669789114911,"results":"26","hashOfConfig":"18"},{"size":1975,"mtime":1669789114911,"results":"27","hashOfConfig":"18"},{"size":3803,"mtime":1669799822084,"results":"28","hashOfConfig":"18"},{"size":1135,"mtime":1669789114283,"results":"29","hashOfConfig":"18"},{"size":2258,"mtime":1669795019483,"results":"30","hashOfConfig":"18"},{"size":1447,"mtime":1669793262374,"results":"31","hashOfConfig":"18"},{"size":1769,"mtime":1669796027254,"results":"32","hashOfConfig":"18"},{"size":7887,"mtime":1669795948898,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"1nyx27j",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"37"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"37"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"37"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"37"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"37"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"37"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"37"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"37"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/index.js",[],[],[],"/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/App.js",["91","92","93","94","95","96","97","98","99","100","101","102","103"],[],"/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/reportWebVitals.js",[],[],"/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/HomePage.js",["104"],[],"import React, {useState, Component} from \"react\";\nimport './HomePage.css';\nimport FlashCard from './components/Flashcard.js'\nimport ParseCard from './components/Parsecard.js'\n\n\nclass HomePage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            cardType: \"FlashCard\",\n            frontText: \"\",\n            backText: \"\",\n            cardHint: \"\",\n            cardDecks: \"\",\n            flipState: false,\n            addCard: this.props.addCard,\n            shakeButtonState: false\n        }\n        this.toggleCardType = this.toggleCardType.bind(this);\n    }\n    \n\n\n    frontTextHandler = (event) => {\n        this.setState({frontText: event.target.value});\n    }\n\n    backTextHandler = (event) => {\n        this.setState({backText: event.target.value});\n    }\n\n    cardDecksHandler = (event) => {\n        this.setState({cardDecks: event.target.value});\n    }\n\n    cardHintHandler = (event) => {\n        this.setState({cardHint: event.target.value});\n    }\n\n    flipCardToggler = (event) => {\n        this.setState({flipState: !this.state.flipState});\n    }\n\n    addCardHandler = (event) => {\n        //First we need to find out if the user put in all they should have.\n        //They do not need a hint, but they need everything else, frontText, backText, and the Deck\n        if (this.state.frontText === \"\" || this.state.backText === \"\" || this.state.cardDecks === \"\") {\n            console.log(\"User did not input all that they needed to!\");\n\n            //So now we might want to do something about it\n            //Lets shake a button:\n            this.setState({\n                shakeButtonState: true\n            });\n            //Now we want to reset the animation so it actually plays it again for us\n            setTimeout(() => this.setState({\n                    shakeButtonState: false\n                }), 500);\n\n            //THIS BREAKS EVERYTHING AND I DO NOT KNOW WHY THAT IS!\n            //Okay, what if the problem is on another side of the card, lets automatically flip the card over for the user\n            if (this.state.frontText === \"\") { //Check the front\n                console.log(\"Front is blank!\");\n                if (this.state.flipState === true) { //We are on the back side\n                    this.setState({\n                        flipState: false\n                    });\n                }\n            }\n            else if (this.state.backText === \"\") { //Check the back\n                console.log(\"Back is blank!\");\n                if (this.state.flipState === false) { //We are on the front side\n                    this.setState({\n                        flipState: true\n                    });\n                }\n            }\n            return;\n        }\n\n        //Now we have to call the page above, to app.js\n        let newDecksArray = [this.state.cardDecks];\n        this.props.addCard(this.state.frontText, this.state.backText, this.state.cardHint, newDecksArray)\n\n        this.setState({frontText: \"\",\n                        backText: \"\",\n                        cardHint: \"\",\n                        cardDecks: \"\",\n                        flipState: false,\n                        shakeButtonState: false}, () => {console.log(\"New HomePage state frontText: \", this.state.frontText, \"BackText: \", this.state.backText)});\n    }\n\n    toggleCardType = () => {\n        if (this.state.cardType ===\"FlashCard\") {\n            this.setState({cardType: \"ParseCard\"});\n        }\n        else {\n            this.setState({cardType: \"FlashCard\"});\n        }\n    }\n\n    parseCardHandler = (event) => {\n        console.log(\"Trying to parse cards!\");\n        //Here we want to get the value of the text area, and parse the cards one by one using: this.props.addCard()\n        //Might be a good idea to set the new value of the text area to the new cards to be parsed? We shall see what happens\n\n    }\n\n\n    render() {\n        return (\n            <div>\n                {this.state.cardType === \"FlashCard\" && <FlashCard \n                                                            type={\"Normal\"} \n                                                            frontText={this.state.frontText} \n                                                            backText={this.state.backText} \n                                                            cardHint={this.state.cardHint} \n                                                            cardDecks={this.state.cardDecks} \n                                                            update={this.updateHandler} \n                                                            flipState={this.state.flipState} \n                                                            flipCard={this.flipCardToggler} \n                                                            frontTextHandler={this.frontTextHandler} \n                                                            backTextHandler={this.backTextHandler} \n                                                            cardDecksHandler={this.cardDecksHandler} \n                                                            cardHintHandler={this.cardHintHandler}></FlashCard>}\n                {this.state.cardType === \"ParseCard\" && <ParseCard></ParseCard>}\n                <div className=\"HomeCardButtons\">\n                    <label className=\"Switch\">\n                        <input type=\"checkbox\"></input>\n                        <span className = \"slider round\" onClick={() => this.toggleCardType()}></span>\n                    </label>\n                    <button className=\"AddCardButton\" data-testid=\"AddCardButton\" style={{animation: this.state.shakeButtonState === false ? 'none' : 'horizontal-shaking .5s'}} onClick={this.state.cardType === \"FlashCard\" ? () => this.addCardHandler() : () => this.parseCardHandler()}>&#43;</button>\n                </div>\n            </div>\n\n\n        )\n    }\n}\n\nexport default HomePage;","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/CollectPage.js",["105"],[],"import React, {useState, Component} from \"react\";\nimport './CollectPage.css';\nimport CollTab from './components/Colltab.js'\nimport styled from 'styled-components';\nimport ImportCard from './components/Importcard';\nimport ExportCard from './components/Exportcard';\n\n\n// interface Props {\n//     cardArray: Card[]; \n//     deleteCard: (targetCard: Card) => void;\n//     updateCard: (targetCard: Card, newFront: string, newBack: string, newHint: string, newDecks: string[]) => void;\n//     exportCards: ( cards: Card[], fileName: string, deckID: string ) => boolean;\n//     parseInputs: (filePath: string, collection: Card[], deckName: string ) => Card[];\n//     updateCollection: (childCollection: Card[]) => void;\n//     parseCardsToString: ( cards: Card[], deckID: string) => string;\n// };\n// interface State {\n//     cardArray: Card[],\n//     importShow: boolean,\n//     exportShow: boolean,\n//     exportSuccess: boolean\n// };\n\nclass CollectPage extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            cardArray: this.props.cardArray,\n            importShow: false,\n            exportShow: false,\n            exportSuccess: false\n        }\n    }\n\n\n    \n\n    deleteHandler = (frontText, backText, cardHint) => {\n        console.log(\"Time to delete card!\");\n        this.setState({cardArray: this.state.cardArray.filter((card) => (card.frontText !== frontText) || (card.backText !== backText))}\n        );\n        this.props.deleteCard(frontText, backText, cardHint);\n        console.log(this.state.cardArray);\n    }\n\n    //I really gotta rethink how I am dealing with props and state, but for now I am deleting stuff in state AND deleting stuff in app.js's cardArray\n    deleteAllHandler() {\n        console.log(\"Deleting all!\");\n        for (let i = 0; i < this.state.cardArray.length; i++) {\n            this.props.deleteCard(this.state.cardArray[i].frontText, this.state.cardArray[i].backText, this.state.cardArray[i].cardHint)\n            this.setState({cardArray: this.state.cardArray.filter((card) => card === \"-1\")});\n        }\n    }\n\n    importToggle() {\n        this.setState({importShow: !this.state.importShow}, () =>{\n            if (this.state.importShow){\n                this.setState({exportShow: !this.state.importShow});\n            }\n        });\n    }\n    exportToggle() {\n        this.setState({exportShow: !this.state.exportShow}, () => {\n            if (this.state.exportShow) {\n                this.setState({importShow: !this.state.exportShow});\n            }\n        });\n    }\n    //Now for some magic!\n    importHandler = (passedCollection) => {\n        // console.log(\"Time to import!\");\n        // console.log(passedCollection[0].frontText);\n        this.setState({cardArray: passedCollection}, () => {\n            this.props.updateCollection(passedCollection)\n        });\n    }\n\n    //And some more magic!\n    downloadCollection = (fileName) => {\n        const element = document.createElement(\"a\");\n        const collectionString = this.props.parseCardsToString(this.state.cardArray,\"\");\n        console.log(collectionString.length);\n        const file = new Blob([collectionString], {\n          type: \"text/plain\"\n        });\n        element.href = URL.createObjectURL(file);\n        element.download = fileName;\n        document.body.appendChild(element);\n        element.click();\n        this.setState({exportSuccess: true});\n    };\n    \n\n    updateHandler = (oldFront, oldBack, oldHint, oldDecks, newFront, newBack, newHint, newDecks) => {\n        this.props.updateCard(oldFront, oldBack, oldHint, oldDecks, newFront, newBack, newHint, newDecks);\n        console.log(\"Finding and upating card from CollectPage.js: oldFront: \", oldFront, \" oldBack: \", oldBack, \" oldHint: \", oldHint);\n\n        \n\n        let tempCardArray = [...this.state.cardArray];\n        let cardIndex = 0;\n        for (let i = 0; i < tempCardArray.length; i++) {\n            if (tempCardArray[i].front === oldFront && tempCardArray[i].back === oldBack) {\n                cardIndex = i;\n                break;\n            }\n        }\n\n        let cardToChange = {...tempCardArray[cardIndex]};\n        cardToChange.frontText = newFront;\n        cardToChange.backText = newBack;\n        cardToChange.cardHint = newHint;\n        cardToChange.cardDecks = newDecks;\n\n        tempCardArray[cardIndex] = cardToChange;\n        this.setState({cardArray: tempCardArray});\n\n        console.log(\"Time to update: \", oldFront);\n    }\n\n    render() {\n    return (\n        <div className= \"collectionContainer\">\n            <p className = \"title\">\n                <div>\n                    Collection\n                    {this.state.importShow && <ImportCard propCollection={this.state.cardArray} parseInputs={this.props.parseInputs} updateCollection={this.importHandler} />}\n                    {this.state.exportShow && <ExportCard downloadCollection={this.downloadCollection} />}\n                    {this.state.exportSuccess && <div>{\"Exported Successfully: \" + this.state.cardArray.length + \" cards\"}</div>}\n                </div>\n                <div className=\"ButtonBox\">\n                    <div className=\"ImportButton\" onClick={() => this.importToggle()}> <IconFolderOpen \n                    src={`https://file.rendit.io/n/WXCzH8U22m3EMPlLJJUe.svg`} \n                    />Import Cards</div>\n                    <div data-testid=\"exportToggle\" className=\"ExportButton\" onClick={() => this.exportToggle()}><IconFolderOpen\n                        src={`https://file.rendit.io/n/WXCzH8U22m3EMPlLJJUe.svg`}\n                    />Export Collection</div>\n                    <div className=\"DeleteButton\" onClick={() => this.deleteAllHandler()}><IconTrash\n                        src={`https://file.rendit.io/n/AWXeYQKewibNjaYdcviF.svg`}\n                    />Delete All</div>\n                </div>\n            </p>\n            <div className = \"collectionWindow\">\n                {this.state.cardArray.length > 0 && <div>\n                    {this.state.cardArray.map((mapCard) => (\n                        // <CollTab key={card.id} frontText = {card.frontText} backText = {card.backText} cardHint = {card.cardHint} cardDecks = {card.cardDecks} deleted = {this.deleteHandler} updated = {this.updateHandler}></CollTab>\n                        <CollTab key = {mapCard.id} card = {mapCard} deleted = {this.deleteHandler} updated = {this.updateHandler}></CollTab>\n                    ))}\n                </div>}\n                {this.state.cardArray.length === 0 && <div className=\"NoCardMessage\">Looks like you have no cards... <br></br>Add cards on the Home Page, or import them here!</div>}\n            </div>\n            <div> {\"Cards: \" + this.state.cardArray.length} </div>\n        </div>\n    )};\n}\n\n\nconst IconTrash = styled.img`\n  width: 11.2px;\n  height: 14px;\n`;\n\nconst IconFolderOpen = styled.img`\n  width: 16px;\n  height: 13px;\n`;\n\nexport default CollectPage;","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/QuizPage.js",["106"],[],"import React, {useState, Component} from \"react\";\nimport './QuizPage.css';\nimport FlashCard from './components/Flashcard.js'\n\n\nclass QuizPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            cardArray: this.props.cardArray,\n            currentFrontText: this.props.cardArray.length > 0 ? this.props.cardArray[0].frontText: \"\",\n            currentBackText: this.props.cardArray.length > 0 ? this.props.cardArray[0].backText: \"\",\n            currentCardHint: this.props.cardArray.length > 0 ? this.props.cardArray[0].cardHint: \"\",\n            currentCardDecks: this.props.cardArray.length > 0 ? this.props.cardArray[0].cardDecks: \"\",\n            cardType: \"QuizCard\",\n            currentIndex: 0,\n            done: false,\n            showHint: false,\n            flipState: false\n        }\n        this.nextCardHandler = this.nextCardHandler.bind(this);\n    }\n\n\n    flipCardToggler = (event) => {\n        this.setState({flipState: !this.state.flipState});\n    }\n\n    showHintToggler = (event) => {\n        this.setState({showHint: !this.state.showHint})\n    }\n\n    flipThenNext(rightOrWrong) {\n        if (this.state.flipState === false) {\n            this.nextCardHandler(rightOrWrong);\n            return;\n        }\n        //Otherwise we want to flip the card over and THEN change the card values\n        this.setState({flipState: false,\n                        showHint: false});\n        setTimeout(() => {\n            this.nextCardHandler(rightOrWrong)\n        }, 500);\n    }\n\n    nextCardHandler = (rightOrWrong) => {\n        this.setState({flipState: false});\n        if (rightOrWrong === \"Correct\") {\n            console.log(\"The user was correct!\");\n            //Do relevant stats stuff\n        }\n        else {\n            console.log(\"The user was Incorrect!\");\n            //Do relevant stats stuff\n        }\n        if (this.state.currentIndex + 1 < this.props.cardArray.length) {\n            this.setState({currentIndex: this.state.currentIndex + 1,\n                            currentFrontText: this.props.cardArray[this.state.currentIndex + 1].frontText,\n                            currentBackText: this.props.cardArray[this.state.currentIndex + 1].backText,\n                            currentCardHint: this.props.cardArray[this.state.currentIndex + 1].cardHint,\n                            currentCardDecks: this.props.cardArray[this.state.currentIndex + 1].cardDecks,\n                            showHint: false,\n                            flipState: false\n            });\n        }\n        else {\n            //We have gone through all the cards and should now display a message to the user about how many they god right...\n            this.setState({done: true});\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {(this.state.done !== true && this.props.cardArray.length > 0) && <div>\n                    <FlashCard type={\"Quiz\"} frontText={this.state.currentFrontText} backText={this.state.currentBackText} cardHint={this.state.currentCardHint} cardDecks={this.state.currentCardDecks} showHint={this.state.showHint} flipState={this.state.flipState} flipCard={this.flipCardToggler} showHintToggler={this.showHintToggler}></FlashCard>\n                    <div className=\"QuizPageButtons\">\n                        <button className=\"CorrectButton\" data-testid=\"CorrectButton\" onClick={() => this.flipThenNext(\"Correct\")}>Correct</button>\n                        <button className=\"IncorrectButton\" data-testid=\"IncorrectButton\" onClick={() => this.flipThenNext(\"Incorrect\")}>Incorrect</button>\n                    </div>\n                </div>}\n                {this.state.done === true && <div>\n                    Looks like that is all the cards!\n                </div>}\n            </div>\n        )\n    }\n}\n\nexport default QuizPage;\n","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/ImportPage.js",["107","108"],[],"import React, {useState, Component} from \"react\";\n/*import './ImportPage.css';*/\nimport ImportCard from './components/Importcard';\n// import { FileUploadField } from './components/Importcard';\n\n// interface Props {\n// }\n// interface State {\n// }\nclass ImportPage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n\n        }\n    }\n\n    render() {\n        return (\n            <div className= \"importPage\">\n                {/* <ImportCard preview={\"\"} /> */}\n            </div>\n        )\n    }\n}\n\nexport default ImportPage;","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/DecksPage.js",[],[],"/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/components/Flashcard.js",["109","110","111"],[],"import React, {Component} from 'react';\nimport './Flashcard.css';\n\nclass FlashCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            type: this.props.type,\n            localCardFront: this.props.frontText,\n            localCardBack: this.props.backText,\n            localCardDecks: this.props.cardDecks,\n            localCardHint: this.props.cardHint,\n            flipState: this.props.flipState,\n            showHint: this.props.showHint\n        }\n    }\n\n\n    flipCardHandler = (event) => {\n        this.props.flipCard();\n    }\n\n    toggleShowHint = (event) => {\n        if (this.state.showHint === true) {\n            this.setState({showHint: false})\n\n        } else {\n            this.setState({showHint: true})\n        }\n    }\n\n    doNothing = (event) => {\n\n    }\n\n    toggleShowHintHandler = (event) => {\n        this.props.showHintToggler();\n    }\n\n\n    render() \n        {\n        \n        const hintHiddenStyle = {\n            animation: 'fadeout .8s forwards'\n        }\n        const hintShownStyle = {\n            animation: 'fadein .8s forwards'\n        }\n\n        const hintAlwaysShow = {\n            animation: 'none'\n        }\n\n        const neverShow = {\n            animation: 'none',\n            opacity: 0\n        }\n\n        const flashCardFlyOut = {\n            animation: 'flyout 1s forwards'\n        }\n        const flashCardFlyIn = {\n            animation: 'flyin 1s forwards'\n        }\n        return (\n            <div className=\"FlashCard\" data-testid=\"FlashCard\">\n                <div className=\"FlashCardInner\" data-testid=\"FlashCardInner\" style={{transform: this.props.flipState ? \"rotateX(180deg)\": \"\"}}>\n                    <div className=\"FlashCardFront\">\n                        <div>\n                            <ul>\n                                <li><span className=\"Dot\" onClick={this.toggleShowHintHandler}></span></li>\n                                <li><input type=\"CardHint\" data-testid=\"FlashCardFrontHint\" placeholder=\"Notes/Hints\" onChange={this.props.cardHintHandler} value={this.props.cardHint} style={this.props.type === \"Quiz\" ? (this.props.showHint === false ? hintHiddenStyle : hintShownStyle) : hintAlwaysShow}></input></li>\n                                <li><input type=\"CardDeck\" data-testid=\"FlashCardFrontDeck\" placeholder=\"Deck\" onChange={this.props.cardDecksHandler} className=\"CardDeck\" value={this.props.cardDecks}></input></li>\n                            </ul>\n                        </div>\n                        <input type=\"CardFrontText\" data-testid=\"FlashCardFrontText\" placeholder=\"Write\" onChange = {this.props.type === \"Normal\" ? this.props.frontTextHandler : this.doNothing} value={this.props.frontText}></input>\n                        <button className=\"FlipCardButton\" onClick={this.flipCardHandler}></button>\n                    </div>\n                    <div className=\"FlashCardBack\">\n                        <div>\n                            <ul>\n                                <li><span className=\"Dot\"></span></li>\n                                <li><input type=\"CardHint\" data-testid=\"FlashCardBackHint\" placeholder=\"Notes/Hints\" onChange={this.props.cardHintHandler} value={this.props.cardHint}></input></li>\n                                <li><input type=\"CardDeck\" data-testid=\"FlashCardBackDeck\" placeholder=\"Deck\" onChange={this.props.cardDecksHandler} className=\"CardDeck\" value={this.props.cardDecks}></input></li>\n                            </ul>\n                        </div>\n                        <input type=\"CardFrontText\" data-testid=\"FlashCardBackText\" placeholder=\"Write Back\" onChange = {this.props.backTextHandler} value={this.props.backText}></input>\n                        <button className=\"FlipCardButton\" onClick={this.flipCardHandler}></button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\nexport default FlashCard","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/components/Parsecard.js",[],[],"/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/components/Colltab.js",[],[],"/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/components/Deckcard.js",["112"],[],"import React, {Component} from 'react';\nimport './Deckcard.css';\nimport styled from 'styled-components';\n\nclass DeckCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            localDeckName: this.props.deckName\n        }\n    }\n\n    downloadHandler = (event) => {\n        console.log(\"Handling download from: \", this.state.localDeckName);\n        this.props.download(this.state.localDeckName);\n    }\n\n    studyHandler = (event) => {\n        console.log(\"Handling study from: \", this.state.localDeckName);\n        this.props.study(this.state.localDeckName);\n    }\n\n    render() {\n        return (\n            <div className = \"DeckCard\">\n                <div className=\"DeckCardInner\">\n                    <div className=\"DeckDot\"></div>\n                    <div className=\"DeckName\" data-testid=\"DeckName\" onClick={() => this.studyHandler()}>{this.props.deckName}</div>\n                    <button className=\"DownloadButton\" src={`./DownloadButton.png`} onClick={() => this.downloadHandler()}></button>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\n\nexport default DeckCard","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/components/Importcard.jsx",["113","114","115","116","117","118"],[],"import React, {Component, ReactElement, useCallback, useState, ChangeEvent} from 'react';\nimport './Importcard.css';\n// import { Card } from \"../../interfaces/card\";\nimport { exportCards, importCards } from '../../importExport';\n\n// interface Props {\n//     collection: Card[],\n//     parseInputs: (textInput: string, currentCollection: Card[], deckName: string) => Card[],\n//     updateCollection: (childCollection: Card[]) => void\n// }\n// interface State {\n//     dragActive: boolean,\n//     collection: Card[]\n// }\nclass ImportCard extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            dragActive: false,\n            collection: this.props.propCollection\n        }\n    };\n\n\n    //Split this into its own function so that the function made by reader.onload can access \"this\" and its state\n    //  There might well be a cleaner way to do it though\n    readerChange(result) {\n        // console.log(\"Parsed state length: \" + this.props.parseInputs(result, this.state.collection, \"\").length);\n        this.setState({collection: this.props.parseInputs(result, this.state.collection, \"\")}, () => {\n            this.props.updateCollection(this.state.collection)\n        }\n        );\n        // console.log(\"Updated state length: \" + this.state.collection.length);\n    }\n\n    changeHandler = ( target) => {\n        if (!target.currentTarget.files){\n            return\n        }\n        const reader = new FileReader();\n        reader.onload = () => {\n            if (reader.result) {\n                this.readerChange(reader.result)\n            }\n        };\n        reader.readAsText(target.currentTarget.files[0]);\n    };\n\n\n    render() {\n        return (\n            <div>\n                {/* <div className=\"ImportCard\">\n                    <form id=\"form-file-upload\" onDragEnter={() => this.dragHandler} onSubmit={() => {}}></form>\n                    <div>Eventually you will drag files here!</div>\n                </div> */}\n                <input data-testid=\"fileUpload\" type=\"file\" id=\"fileUpload\" onChange={this.changeHandler} />                \n                <div>\n                    {this.state.collection.length}\n                </div>\n            </div>\n        )\n    }\n}\nexport default ImportCard;","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/pages/components/Exportcard.jsx",["119"],[],"import React, {Component} from 'react';\nimport './Importcard.css';\nimport { Form } from \"react-bootstrap\";\n\n\n// interface Props {\n//     downloadCollection: (fileName: string) => void\n// }\n// interface State {\n//     fileName: string\n// }\nclass ImportCard extends Component{\n    constructor(props) {\n        super(props)\n        this.state = {\n            fileName: \"\"\n        }\n    };\n\n    updateFileName = (event) => {\n        this.setState({fileName: event.target.value});\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"ExportCard\">\n                    {/* <Form.Group controlId=\"formDownload\">\n                        <Form.Label>Name:</Form.Label>\n                        <Form.Control\n                            value={this.state.fileName}\n                            onSubmit={this.updateFileName} />\n                        </Form.Group> */}\n                        <input data-testid=\"exportLocation\" type=\"text\" onChange={ this.updateFileName } value={ this.state.fileName } />\n                        <div>\n                            The movie is \"{this.state.fileName}\".\n                        </div>\n                    <div>\n                        <button data-testid=\"downloadButton\" onClick={() => {this.props.downloadCollection(this.state.fileName)}}>Download</button>\n                    </div> \n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ImportCard;","/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/utils.js",["120","121"],[],"/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/importExport.js",["122","123","124","125","126"],[],{"ruleId":"127","severity":1,"message":"128","line":1,"column":8,"nodeType":"129","messageId":"130","endLine":1,"endColumn":12},{"ruleId":"127","severity":1,"message":"131","line":10,"column":10,"nodeType":"129","messageId":"130","endLine":10,"endColumn":22},{"ruleId":"127","severity":1,"message":"132","line":10,"column":24,"nodeType":"129","messageId":"130","endLine":10,"endColumn":37},{"ruleId":"127","severity":1,"message":"133","line":10,"column":39,"nodeType":"129","messageId":"130","endLine":10,"endColumn":49},{"ruleId":"127","severity":1,"message":"134","line":10,"column":51,"nodeType":"129","messageId":"130","endLine":10,"endColumn":63},{"ruleId":"127","severity":1,"message":"135","line":10,"column":65,"nodeType":"129","messageId":"130","endLine":10,"endColumn":77},{"ruleId":"127","severity":1,"message":"136","line":37,"column":10,"nodeType":"129","messageId":"130","endLine":37,"endColumn":21},{"ruleId":"137","severity":1,"message":"138","line":109,"column":21,"nodeType":"139","endLine":109,"endColumn":114},{"ruleId":"137","severity":1,"message":"138","line":110,"column":25,"nodeType":"139","endLine":110,"endColumn":102},{"ruleId":"137","severity":1,"message":"138","line":111,"column":25,"nodeType":"139","endLine":111,"endColumn":100},{"ruleId":"137","severity":1,"message":"138","line":112,"column":25,"nodeType":"139","endLine":112,"endColumn":112},{"ruleId":"137","severity":1,"message":"138","line":113,"column":25,"nodeType":"139","endLine":113,"endColumn":82},{"ruleId":"137","severity":1,"message":"138","line":114,"column":21,"nodeType":"139","endLine":114,"endColumn":54},{"ruleId":"127","severity":1,"message":"140","line":1,"column":16,"nodeType":"129","messageId":"130","endLine":1,"endColumn":24},{"ruleId":"127","severity":1,"message":"140","line":1,"column":16,"nodeType":"129","messageId":"130","endLine":1,"endColumn":24},{"ruleId":"127","severity":1,"message":"140","line":1,"column":16,"nodeType":"129","messageId":"130","endLine":1,"endColumn":24},{"ruleId":"127","severity":1,"message":"140","line":1,"column":16,"nodeType":"129","messageId":"130","endLine":1,"endColumn":24},{"ruleId":"127","severity":1,"message":"141","line":3,"column":8,"nodeType":"129","messageId":"130","endLine":3,"endColumn":18},{"ruleId":"127","severity":1,"message":"142","line":55,"column":15,"nodeType":"129","messageId":"130","endLine":55,"endColumn":24},{"ruleId":"127","severity":1,"message":"143","line":60,"column":15,"nodeType":"129","messageId":"130","endLine":60,"endColumn":30},{"ruleId":"127","severity":1,"message":"144","line":63,"column":15,"nodeType":"129","messageId":"130","endLine":63,"endColumn":29},{"ruleId":"127","severity":1,"message":"145","line":3,"column":8,"nodeType":"129","messageId":"130","endLine":3,"endColumn":14},{"ruleId":"127","severity":1,"message":"146","line":1,"column":27,"nodeType":"129","messageId":"130","endLine":1,"endColumn":39},{"ruleId":"127","severity":1,"message":"147","line":1,"column":41,"nodeType":"129","messageId":"130","endLine":1,"endColumn":52},{"ruleId":"127","severity":1,"message":"140","line":1,"column":54,"nodeType":"129","messageId":"130","endLine":1,"endColumn":62},{"ruleId":"127","severity":1,"message":"148","line":1,"column":64,"nodeType":"129","messageId":"130","endLine":1,"endColumn":75},{"ruleId":"127","severity":1,"message":"149","line":4,"column":10,"nodeType":"129","messageId":"130","endLine":4,"endColumn":21},{"ruleId":"127","severity":1,"message":"150","line":4,"column":23,"nodeType":"129","messageId":"130","endLine":4,"endColumn":34},{"ruleId":"127","severity":1,"message":"151","line":3,"column":10,"nodeType":"129","messageId":"130","endLine":3,"endColumn":14},{"ruleId":"152","severity":1,"message":"153","line":14,"column":34,"nodeType":"154","messageId":"155","endLine":14,"endColumn":36},{"ruleId":"152","severity":1,"message":"153","line":39,"column":35,"nodeType":"154","messageId":"155","endLine":39,"endColumn":37},{"ruleId":"127","severity":1,"message":"132","line":5,"column":24,"nodeType":"129","messageId":"130","endLine":5,"endColumn":37},{"ruleId":"127","severity":1,"message":"134","line":5,"column":39,"nodeType":"129","messageId":"130","endLine":5,"endColumn":51},{"ruleId":"152","severity":1,"message":"153","line":183,"column":27,"nodeType":"154","messageId":"155","endLine":183,"endColumn":29},{"ruleId":"152","severity":1,"message":"153","line":187,"column":30,"nodeType":"154","messageId":"155","endLine":187,"endColumn":32},{"ruleId":"152","severity":1,"message":"153","line":190,"column":45,"nodeType":"154","messageId":"155","endLine":190,"endColumn":47},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'cardEquality' is defined but never used.","'arrayEquality' is defined but never used.","'exportPath' is defined but never used.","'deckEquality' is defined but never used.","'stringToCard' is defined but never used.","'getDeckList' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useState' is defined but never used.","'ImportCard' is defined but never used.","'neverShow' is assigned a value but never used.","'flashCardFlyOut' is assigned a value but never used.","'flashCardFlyIn' is assigned a value but never used.","'styled' is defined but never used.","'ReactElement' is defined but never used.","'useCallback' is defined but never used.","'ChangeEvent' is defined but never used.","'exportCards' is defined but never used.","'importCards' is defined but never used.","'Form' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside"]