{"ast":null,"code":"var _jsxFileName = \"/home/josh/Desktop/COS520/Mem/TeamC/memento-with-react/src/pages/HomePage.tsx\";\nimport React, { Component } from \"react\";\nimport './HomePage.css';\nimport FlashCard from './components/Flashcard';\nimport ParseCard from './components/Parsecard';\n\n// class App extends React.Component<{ message: string }, { count: number }> {\n//     state = { count: 0 };\n//     render() {\n//       return (\n//         <div onClick={() => this.increment(1)}>\n//           {this.props.message} {this.state.count}\n//         </div>\n//       );\n//     }\n//     increment = (amt: number) => {\n//       // like this\n//       this.setState((state) => ({\n//         count: state.count + amt,\n//       }));\n//     };\n//   }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\n;\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.updateHandler = (newFront, newBack, newHint, newDeck) => {\n      console.log(\"updating!\");\n      this.setState({\n        frontText: newFront,\n        backText: newBack,\n        cardHint: newHint,\n        cardDeck: newDeck\n      });\n    };\n    this.addCardHandler = event => {\n      this.setState({\n        frontText: \"\",\n        backText: \"\",\n        cardHint: \"\",\n        cardDeck: \"\"\n      }, () => {\n        console.log(\"New HomePage state frontText: \", this.state.frontText);\n      });\n\n      //Now we have to call the page above, to app.js\n      console.log(\"Trying to add Card! in HomePage, got: \", this.state.frontText, \"Back: \", this.state.backText);\n      //! Changed newDeckArray to be a string, assuming that the user only adds new cards to at most 1 deck\n      let newDeckArray = this.state.cardDeck;\n      this.props.addCard(this.state.frontText, this.state.backText, this.state.cardHint, newDeckArray);\n    };\n    this.toggleCardType = () => {\n      if (this.state.cardType === \"FlashCard\") {\n        this.setState({\n          cardType: \"ParseCard\"\n        });\n      } else {\n        this.setState({\n          cardType: \"FlashCard\"\n        });\n      }\n      console.log(\"Toggling Card!\");\n    };\n    this.state = {\n      cardType: \"FlashCard\",\n      frontText: \"\",\n      backText: \"\",\n      cardHint: \"\",\n      cardDeck: \"\",\n      addCard: this.props.addCard\n    };\n    this.toggleCardType = this.toggleCardType.bind(this);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.cardType === \"FlashCard\" && /*#__PURE__*/_jsxDEV(FlashCard, {\n        type: \"Normal\",\n        frontText: this.state.frontText,\n        backText: this.state.backText,\n        cardHint: this.state.cardHint,\n        cardDeck: this.state.cardDeck,\n        update: this.updateHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 57\n      }, this), this.state.cardType === \"ParseCard\" && /*#__PURE__*/_jsxDEV(ParseCard, {\n        cardDeck: this.state.cardDeck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 57\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"HomeCardButtons\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"Switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider round\",\n            onClick: () => this.toggleCardType\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"AddCardButton\",\n          onClick: () => this.addCardHandler,\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default HomePage;","map":{"version":3,"names":["React","Component","FlashCard","ParseCard","HomePage","constructor","props","updateHandler","newFront","newBack","newHint","newDeck","console","log","setState","frontText","backText","cardHint","cardDeck","addCardHandler","event","state","newDeckArray","addCard","toggleCardType","cardType","bind","render"],"sources":["/home/josh/Desktop/COS520/Mem/TeamC/memento-with-react/src/pages/HomePage.tsx"],"sourcesContent":["import React, {useState, Component} from \"react\";\nimport './HomePage.css';\nimport FlashCard from './components/Flashcard'\nimport ParseCard from './components/Parsecard'\n\n// class App extends React.Component<{ message: string }, { count: number }> {\n//     state = { count: 0 };\n//     render() {\n//       return (\n//         <div onClick={() => this.increment(1)}>\n//           {this.props.message} {this.state.count}\n//         </div>\n//       );\n//     }\n//     increment = (amt: number) => {\n//       // like this\n//       this.setState((state) => ({\n//         count: state.count + amt,\n//       }));\n//     };\n//   }\n\ninterface Props {\n    cardType: string;\n    addCard: (cFrontText: string, cBackText: string, cCardHint: string, cCardDeck: string) => void;\n};\ninterface State {\n    cardType: string,\n    frontText: string,\n    backText: string,\n    cardHint: string,\n    cardDeck: string,\n    addCard: (cFrontText: string, cBackText: string, cCardHint: string, cCardDeck: string) => void\n};\n\nclass HomePage extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props)\n        this.state = {\n            cardType: \"FlashCard\",\n            frontText: \"\",\n            backText: \"\",\n            cardHint: \"\",\n            cardDeck: \"\",\n            addCard: this.props.addCard\n        }\n        this.toggleCardType = this.toggleCardType.bind(this);\n    }\n    \n\n    updateHandler = (newFront: string, newBack: string, newHint: string, newDeck: string): void => {\n        console.log(\"updating!\");\n        this.setState({frontText: newFront,\n                        backText: newBack,\n                        cardHint: newHint,\n                        cardDeck: newDeck});\n    }\n\n    addCardHandler = (event: MouseEvent): void => {\n        this.setState({frontText: \"\",\n                        backText: \"\",\n                        cardHint: \"\",\n                        cardDeck: \"\"}, () => {console.log(\"New HomePage state frontText: \", this.state.frontText)});\n                    \n        //Now we have to call the page above, to app.js\n        console.log(\"Trying to add Card! in HomePage, got: \", this.state.frontText, \"Back: \", this.state.backText);\n        //! Changed newDeckArray to be a string, assuming that the user only adds new cards to at most 1 deck\n        let newDeckArray = this.state.cardDeck;\n        this.props.addCard(this.state.frontText, this.state.backText, this.state.cardHint, newDeckArray)\n    }\n\n    toggleCardType = () => {\n        if (this.state.cardType ===\"FlashCard\") {\n            this.setState({cardType: \"ParseCard\"});\n        }\n        else {\n            this.setState({cardType: \"FlashCard\"});\n        }\n        console.log(\"Toggling Card!\");\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.cardType === \"FlashCard\" && <FlashCard type={\"Normal\"} frontText={this.state.frontText} backText={this.state.backText} cardHint={this.state.cardHint} cardDeck={this.state.cardDeck} update = {this.updateHandler}></FlashCard>}\n                {this.state.cardType === \"ParseCard\" && <ParseCard cardDeck={this.state.cardDeck}></ParseCard>}\n                <div className=\"HomeCardButtons\">\n                    <label className=\"Switch\">\n                        <input type=\"checkbox\"></input>\n                        <span className = \"slider round\" onClick={() => this.toggleCardType}></span>\n                    </label>\n                    <button className=\"AddCardButton\" onClick={() => this.addCardHandler}>&#43;</button>\n                </div>\n            </div>\n\n\n        )\n    }\n}\n\nexport default HomePage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}