{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/Memento Project Git/TeamC/memento-with-react/src/pages/HomePage.js\";\nimport React, { useState, Component } from \"react\";\nimport './HomePage.css';\nimport FlashCard from './components/Flashcard.js';\nimport ParseCard from './components/Parsecard.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.updateHandler = (newFront, newBack, newHint, newDecks) => {\n      this.setState({\n        frontText: newFront,\n        backText: newBack,\n        cardHint: newHint,\n        cardDecks: newDecks\n      });\n    };\n    this.flipCardHandler = event => {\n      this.setState({\n        flipState: !this.state.flipState\n      });\n    };\n    this.addCardHandler = event => {\n      this.setState({\n        frontText: \"\",\n        backText: \"\",\n        cardHint: \"\",\n        cardDecks: \"\",\n        flipState: false\n      }, () => {\n        console.log(\"New HomePage state frontText: \", this.state.frontText);\n      });\n\n      //Now we have to call the page above, to app.js\n      let newDecksArray = [this.state.cardDecks];\n      this.props.addCard(this.state.frontText, this.state.backText, this.state.cardHint, newDecksArray);\n    };\n    this.toggleCardType = () => {\n      if (this.state.cardType === \"FlashCard\") {\n        this.setState({\n          cardType: \"ParseCard\"\n        });\n      } else {\n        this.setState({\n          cardType: \"FlashCard\"\n        });\n      }\n    };\n    this.parseCardHandler = event => {\n      console.log(\"Trying to parse cards!\");\n      //Here we want to get the value of the text area, and parse the cards one by one using: this.props.addCard()\n      //Might be a good idea to set the new value of the text area to the new cards to be parsed? We shall see what happens\n    };\n    this.state = {\n      cardType: \"FlashCard\",\n      frontText: \"\",\n      backText: \"\",\n      cardHint: \"\",\n      cardDecks: \"\",\n      flipState: false,\n      addCard: this.props.addCard\n    };\n    this.toggleCardType = this.toggleCardType.bind(this);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.cardType === \"FlashCard\" && /*#__PURE__*/_jsxDEV(FlashCard, {\n        type: \"Normal\",\n        frontText: this.state.frontText,\n        backText: this.state.backText,\n        cardHint: this.state.cardHint,\n        cardDecks: this.state.cardDecks,\n        update: this.updateHandler,\n        flipState: this.state.flipState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 57\n      }, this), this.state.cardType === \"ParseCard\" && /*#__PURE__*/_jsxDEV(ParseCard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 57\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"HomeCardButtons\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"Switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider round\",\n            onClick: () => this.toggleCardType()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"AddCardButton\",\n          onClick: this.state.cardType === \"FlashCard\" ? () => this.addCardHandler() : () => this.parseCardHandler(),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default HomePage;","map":{"version":3,"names":["React","useState","Component","FlashCard","ParseCard","HomePage","constructor","props","updateHandler","newFront","newBack","newHint","newDecks","setState","frontText","backText","cardHint","cardDecks","flipCardHandler","event","flipState","state","addCardHandler","console","log","newDecksArray","addCard","toggleCardType","cardType","parseCardHandler","bind","render"],"sources":["/home/anthony/Desktop/Memento Project Git/TeamC/memento-with-react/src/pages/HomePage.js"],"sourcesContent":["import React, {useState, Component} from \"react\";\nimport './HomePage.css';\nimport FlashCard from './components/Flashcard.js'\nimport ParseCard from './components/Parsecard.js'\n\n\nclass HomePage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            cardType: \"FlashCard\",\n            frontText: \"\",\n            backText: \"\",\n            cardHint: \"\",\n            cardDecks: \"\",\n            flipState: false,\n            addCard: this.props.addCard\n        }\n        this.toggleCardType = this.toggleCardType.bind(this);\n    }\n    \n\n    updateHandler = (newFront, newBack, newHint, newDecks) => {\n        this.setState({frontText: newFront,\n                        backText: newBack,\n                        cardHint: newHint,\n                        cardDecks: newDecks});\n    }\n\n    flipCardHandler = (event) => {\n        this.setState({flipState: !this.state.flipState});\n    }\n\n    addCardHandler = (event) => {\n        this.setState({frontText: \"\",\n                        backText: \"\",\n                        cardHint: \"\",\n                        cardDecks: \"\",\n                        flipState: false}, () => {console.log(\"New HomePage state frontText: \", this.state.frontText)});\n                    \n        //Now we have to call the page above, to app.js\n        let newDecksArray = [this.state.cardDecks];\n        this.props.addCard(this.state.frontText, this.state.backText, this.state.cardHint, newDecksArray)\n    }\n\n    toggleCardType = () => {\n        if (this.state.cardType ===\"FlashCard\") {\n            this.setState({cardType: \"ParseCard\"});\n        }\n        else {\n            this.setState({cardType: \"FlashCard\"});\n        }\n    }\n\n    parseCardHandler = (event) => {\n        console.log(\"Trying to parse cards!\");\n        //Here we want to get the value of the text area, and parse the cards one by one using: this.props.addCard()\n        //Might be a good idea to set the new value of the text area to the new cards to be parsed? We shall see what happens\n\n    }\n\n\n    render() {\n        return (\n            <div>\n                {this.state.cardType === \"FlashCard\" && <FlashCard type={\"Normal\"} frontText={this.state.frontText} backText={this.state.backText} cardHint={this.state.cardHint} cardDecks={this.state.cardDecks} update={this.updateHandler} flipState={this.state.flipState}></FlashCard>}\n                {this.state.cardType === \"ParseCard\" && <ParseCard></ParseCard>}\n                <div className=\"HomeCardButtons\">\n                    <label className=\"Switch\">\n                        <input type=\"checkbox\"></input>\n                        <span className = \"slider round\" onClick={() => this.toggleCardType()}></span>\n                    </label>\n                    <button className=\"AddCardButton\" onClick={this.state.cardType === \"FlashCard\" ? () => this.addCardHandler() : () => this.parseCardHandler()}>&#43;</button>\n                </div>\n            </div>\n\n\n        )\n    }\n}\n\nexport default HomePage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}