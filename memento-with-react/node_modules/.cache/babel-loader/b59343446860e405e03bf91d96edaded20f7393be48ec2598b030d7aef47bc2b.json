{"ast":null,"code":"var _jsxFileName = \"/home/anthony/Desktop/Memento Project Git/TeamC/memento-with-react/src/pages/HomePage.js\";\nimport React, { useState, Component } from \"react\";\nimport './HomePage.css';\nimport FlashCard from './components/Flashcard.js';\nimport ParseCard from './components/Parsecard.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.frontTextHandler = event => {\n      this.setState({\n        frontText: event.target.value\n      });\n    };\n    this.backTextHandler = event => {\n      this.setState({\n        backText: event.target.value\n      });\n    };\n    this.cardDecksHandler = event => {\n      this.setState({\n        cardDecks: event.target.value\n      });\n    };\n    this.cardHintHandler = event => {\n      this.setState({\n        cardHint: event.target.value\n      });\n    };\n    this.flipCardToggler = event => {\n      this.setState({\n        flipState: !this.state.flipState\n      });\n    };\n    this.addCardHandler = event => {\n      //First we need to find out if the user put in all they should have.\n      //They do not need a hint, but they need everything else, frontText, backText, and the Deck\n      if (this.state.frontText === \"\" || this.state.backText === \"\" || this.state.cardDecks === \"\") {\n        console.log(\"User did not input all that they needed to!\");\n\n        //So now we might want to do something about it\n        //Lets shake a button:\n        this.setState({\n          shakeButtonState: true\n        });\n        //Now we want to reset the animation so it actually plays it again for us\n        setTimeout(this.setState({\n          shakeButtonState: false\n        }), 500);\n\n        //THIS BREAKS EVERYTHING AND I DO NOT KNOW WHY THAT IS!\n        //Okay, what if the problem is on another side of the card, lets automatically flip the card over for the user\n        if (this.state.frontText === \"\") {\n          //Check the front\n          if (this.state.flipState === true) {\n            //We are on the back side\n            this.setState = {\n              flipState: false\n            };\n          }\n        } else if (this.state.backText === \"\") {\n          //Check the back\n          if (this.state.flipState === false) {\n            //We are on the front side\n            this.setState = {\n              flipState: true\n            };\n          }\n        }\n        console.log(\"about to return!\");\n        return;\n      }\n\n      //Now we have to call the page above, to app.js\n      let newDecksArray = [...this.state.cardDecks];\n      this.props.addCard(this.state.frontText, this.state.backText, this.state.cardHint, newDecksArray);\n      this.setState({\n        frontText: \"\",\n        backText: \"\",\n        cardHint: \"\",\n        cardDecks: \"\",\n        flipState: false,\n        shakeButtonState: false\n      }, () => {\n        console.log(\"New HomePage state frontText: \", this.state.frontText, \"BackText: \", this.state.backText);\n      });\n    };\n    this.toggleCardType = () => {\n      if (this.state.cardType === \"FlashCard\") {\n        this.setState({\n          cardType: \"ParseCard\"\n        });\n      } else {\n        this.setState({\n          cardType: \"FlashCard\"\n        });\n      }\n    };\n    this.parseCardHandler = event => {\n      console.log(\"Trying to parse cards!\");\n      //Here we want to get the value of the text area, and parse the cards one by one using: this.props.addCard()\n      //Might be a good idea to set the new value of the text area to the new cards to be parsed? We shall see what happens\n    };\n    this.state = {\n      cardType: \"FlashCard\",\n      frontText: \"\",\n      backText: \"\",\n      cardHint: \"\",\n      cardDecks: \"\",\n      flipState: false,\n      addCard: this.props.addCard,\n      shakeButtonState: false\n    };\n    this.toggleCardType = this.toggleCardType.bind(this);\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.state.cardType === \"FlashCard\" && /*#__PURE__*/_jsxDEV(FlashCard, {\n        type: \"Normal\",\n        frontText: this.state.frontText,\n        backText: this.state.backText,\n        cardHint: this.state.cardHint,\n        cardDecks: this.state.cardDecks,\n        update: this.updateHandler,\n        flipState: this.state.flipState,\n        flipCard: this.flipCardToggler,\n        frontTextHandler: this.frontTextHandler,\n        backTextHandler: this.backTextHandler,\n        cardDecksHandler: this.cardDecksHandler,\n        cardHintHandler: this.cardHintHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 57\n      }, this), this.state.cardType === \"ParseCard\" && /*#__PURE__*/_jsxDEV(ParseCard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 57\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"HomeCardButtons\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"Switch\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"slider round\",\n            onClick: () => this.toggleCardType()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"AddCardButton\",\n          \"data-testid\": \"AddCardButton\",\n          style: {\n            animation: this.state.shakeButtonState === false ? 'none' : 'horizontal-shaking .5s'\n          },\n          onClick: this.state.cardType === \"FlashCard\" ? () => this.addCardHandler() : () => this.parseCardHandler(),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default HomePage;","map":{"version":3,"names":["React","useState","Component","FlashCard","ParseCard","HomePage","constructor","props","frontTextHandler","event","setState","frontText","target","value","backTextHandler","backText","cardDecksHandler","cardDecks","cardHintHandler","cardHint","flipCardToggler","flipState","state","addCardHandler","console","log","shakeButtonState","setTimeout","newDecksArray","addCard","toggleCardType","cardType","parseCardHandler","bind","render","updateHandler","animation"],"sources":["/home/anthony/Desktop/Memento Project Git/TeamC/memento-with-react/src/pages/HomePage.js"],"sourcesContent":["import React, {useState, Component} from \"react\";\nimport './HomePage.css';\nimport FlashCard from './components/Flashcard.js'\nimport ParseCard from './components/Parsecard.js'\n\n\nclass HomePage extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            cardType: \"FlashCard\",\n            frontText: \"\",\n            backText: \"\",\n            cardHint: \"\",\n            cardDecks: \"\",\n            flipState: false,\n            addCard: this.props.addCard,\n            shakeButtonState: false\n        }\n        this.toggleCardType = this.toggleCardType.bind(this);\n    }\n    \n\n\n    frontTextHandler = (event) => {\n        this.setState({frontText: event.target.value});\n    }\n\n    backTextHandler = (event) => {\n        this.setState({backText: event.target.value});\n    }\n\n    cardDecksHandler = (event) => {\n        this.setState({cardDecks: event.target.value});\n    }\n\n    cardHintHandler = (event) => {\n        this.setState({cardHint: event.target.value});\n    }\n\n    flipCardToggler = (event) => {\n        this.setState({flipState: !this.state.flipState});\n    }\n\n    addCardHandler = (event) => {\n        //First we need to find out if the user put in all they should have.\n        //They do not need a hint, but they need everything else, frontText, backText, and the Deck\n        if (this.state.frontText === \"\" || this.state.backText === \"\" || this.state.cardDecks === \"\") {\n            console.log(\"User did not input all that they needed to!\");\n\n            //So now we might want to do something about it\n            //Lets shake a button:\n            this.setState({\n                shakeButtonState: true\n            });\n            //Now we want to reset the animation so it actually plays it again for us\n            setTimeout(this.setState({\n                    shakeButtonState: false\n                }), 500);\n\n            //THIS BREAKS EVERYTHING AND I DO NOT KNOW WHY THAT IS!\n            //Okay, what if the problem is on another side of the card, lets automatically flip the card over for the user\n            if (this.state.frontText === \"\") { //Check the front\n                if (this.state.flipState === true) { //We are on the back side\n                    this.setState = ({\n                        flipState: false\n                    });\n                }\n            }\n            else if (this.state.backText === \"\") { //Check the back\n                if (this.state.flipState === false) { //We are on the front side\n                    this.setState = ({\n                        flipState: true\n                    });\n                }\n            }\n            console.log(\"about to return!\");\n            return;\n        }\n\n\n        //Now we have to call the page above, to app.js\n        let newDecksArray = [...this.state.cardDecks];\n        this.props.addCard(this.state.frontText, this.state.backText, this.state.cardHint, newDecksArray)\n\n        this.setState({frontText: \"\",\n                        backText: \"\",\n                        cardHint: \"\",\n                        cardDecks: \"\",\n                        flipState: false,\n                        shakeButtonState: false}, () => {console.log(\"New HomePage state frontText: \", this.state.frontText, \"BackText: \", this.state.backText)});\n    }\n\n    toggleCardType = () => {\n        if (this.state.cardType ===\"FlashCard\") {\n            this.setState({cardType: \"ParseCard\"});\n        }\n        else {\n            this.setState({cardType: \"FlashCard\"});\n        }\n    }\n\n    parseCardHandler = (event) => {\n        console.log(\"Trying to parse cards!\");\n        //Here we want to get the value of the text area, and parse the cards one by one using: this.props.addCard()\n        //Might be a good idea to set the new value of the text area to the new cards to be parsed? We shall see what happens\n\n    }\n\n\n    render() {\n        return (\n            <div>\n                {this.state.cardType === \"FlashCard\" && <FlashCard \n                                                            type={\"Normal\"} \n                                                            frontText={this.state.frontText} \n                                                            backText={this.state.backText} \n                                                            cardHint={this.state.cardHint} \n                                                            cardDecks={this.state.cardDecks} \n                                                            update={this.updateHandler} \n                                                            flipState={this.state.flipState} \n                                                            flipCard={this.flipCardToggler} \n                                                            frontTextHandler={this.frontTextHandler} \n                                                            backTextHandler={this.backTextHandler} \n                                                            cardDecksHandler={this.cardDecksHandler} \n                                                            cardHintHandler={this.cardHintHandler}></FlashCard>}\n                {this.state.cardType === \"ParseCard\" && <ParseCard></ParseCard>}\n                <div className=\"HomeCardButtons\">\n                    <label className=\"Switch\">\n                        <input type=\"checkbox\"></input>\n                        <span className = \"slider round\" onClick={() => this.toggleCardType()}></span>\n                    </label>\n                    <button className=\"AddCardButton\" data-testid=\"AddCardButton\" style={{animation: this.state.shakeButtonState === false ? 'none' : 'horizontal-shaking .5s'}} onClick={this.state.cardType === \"FlashCard\" ? () => this.addCardHandler() : () => this.parseCardHandler()}>&#43;</button>\n                </div>\n            </div>\n\n\n        )\n    }\n}\n\nexport default HomePage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}