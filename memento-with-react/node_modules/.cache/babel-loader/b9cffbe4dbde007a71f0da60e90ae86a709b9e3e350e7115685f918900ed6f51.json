{"ast":null,"code":"export const exportPath = \"./exportedCards/\";\n\n// export function arrayEquality(arrayOne: string[], arrayTwo: string[]): boolean {\n//     if (arrayOne.length !== arrayTwo.length) {\n//         return false;\n//     };\n//     let isEqual = true;\n//     arrayOne.map((string: string, index: number): void => {\n//         if (string !== arrayTwo[index]) {\n//             isEqual = false;\n//         }\n//     });\n//     return isEqual;\n// }\n\n// export function cardEquality(cardOne: Card, cardTwo: Card): boolean {\n//     const isEqual: boolean =\n//         cardOne.front === cardTwo.front &&\n//         cardOne.back === cardTwo.back &&\n//         arrayEquality(cardOne.decks, cardTwo.decks) &&\n//         cardOne.accuracy === cardTwo.accuracy;\n//     return isEqual;\n// }\n\n// export function deckEquality(deckOne: Card[], deckTwo: Card[]): boolean {\n//     let isEqual: boolean = true;\n//     if (deckOne.length === 0 || deckOne.length !== deckTwo.length){\n//         isEqual = false;\n//     }\n//     else {\n//         deckOne.map((card: Card, index: number): void => {\n//             if (cardEquality(card, deckTwo[index]) !== true) {\n//                 isEqual = false;\n//             }\n//         });\n//     }\n//     return isEqual;\n// }\n\n// export function stringToCard(string: string): Card {\n//     const cardArray: string[] = string.split(\"<|>\")\n//     const card: Card = {\n//         front: cardArray[0],\n//         back: cardArray[1],\n//         decks: cardArray[2].split(\",\"),\n//         accuracy: Number(cardArray[3])\n//     }\n//     return card;\n// }","map":{"version":3,"names":["exportPath"],"sources":["/home/josh/Desktop/COS520/Mem/TeamC/memento-with-react/src/utils.ts"],"sourcesContent":["import { urlToHttpOptions } from \"url\";\nimport { Card } from \"./interfaces/card\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport { equal } from \"assert\";\n\nexport const exportPath: string = \"./exportedCards/\";\n\n// export function arrayEquality(arrayOne: string[], arrayTwo: string[]): boolean {\n//     if (arrayOne.length !== arrayTwo.length) {\n//         return false;\n//     };\n//     let isEqual = true;\n//     arrayOne.map((string: string, index: number): void => {\n//         if (string !== arrayTwo[index]) {\n//             isEqual = false;\n//         }\n//     });\n//     return isEqual;\n// }\n\n// export function cardEquality(cardOne: Card, cardTwo: Card): boolean {\n//     const isEqual: boolean =\n//         cardOne.front === cardTwo.front &&\n//         cardOne.back === cardTwo.back &&\n//         arrayEquality(cardOne.decks, cardTwo.decks) &&\n//         cardOne.accuracy === cardTwo.accuracy;\n//     return isEqual;\n// }\n\n// export function deckEquality(deckOne: Card[], deckTwo: Card[]): boolean {\n//     let isEqual: boolean = true;\n//     if (deckOne.length === 0 || deckOne.length !== deckTwo.length){\n//         isEqual = false;\n//     }\n//     else {\n//         deckOne.map((card: Card, index: number): void => {\n//             if (cardEquality(card, deckTwo[index]) !== true) {\n//                 isEqual = false;\n//             }\n//         });\n//     }\n//     return isEqual;\n// }\n\n\n// export function stringToCard(string: string): Card {\n//     const cardArray: string[] = string.split(\"<|>\")\n//     const card: Card = {\n//         front: cardArray[0],\n//         back: cardArray[1],\n//         decks: cardArray[2].split(\",\"),\n//         accuracy: Number(cardArray[3])\n//     }\n//     return card;\n// }"],"mappings":"AAMA,OAAO,MAAMA,UAAkB,GAAG,kBAAkB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}