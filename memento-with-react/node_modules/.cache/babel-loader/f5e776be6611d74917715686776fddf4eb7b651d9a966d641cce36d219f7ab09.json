{"ast":null,"code":"// import { urlToHttpOptions } from \"url\";\n// import { Card } from \"./interfaces/card\";\n// import * as fs from \"fs\";\n// import * as path from \"path\";\n// import { equal } from \"assert\";\n\nexport const exportPath = \"./exportedCards/\";\nexport function arrayEquality(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) {\n    return false;\n  }\n  ;\n  let isEqual = true;\n  arrayOne.map((string, index) => {\n    if (string !== arrayTwo[index]) {\n      isEqual = false;\n    }\n  });\n  return isEqual;\n}\nexport function cardEquality(cardOne, cardTwo) {\n  const isEqual = cardOne.frontText === cardTwo.frontText && cardOne.backText === cardTwo.backText && arrayEquality(cardOne.cardDecks, cardTwo.cardDecks) && cardOne.cardHint === cardTwo.cardHint && cardOne.cardColor === cardTwo.cardColor && cardOne.accuracy === cardTwo.accuracy;\n  return isEqual;\n}\nexport function deckEquality(deckOne, deckTwo) {\n  let isEqual = true;\n  if (deckOne.length === 0 || deckOne.length !== deckTwo.length) {\n    isEqual = false;\n  } else {\n    deckOne.map((card, index) => {\n      if (cardEquality(card, deckTwo[index]) !== true) {\n        isEqual = false;\n      }\n    });\n  }\n  return isEqual;\n}\nexport function stringToCard(string) {\n  const cardArray = string.split(\"<|>\");\n  const card = {\n    // The ID of imported cards needs to be assigned at the time of import based on the collection\n    id: -1,\n    cardColor: cardArray[0],\n    frontText: cardArray[1],\n    backText: cardArray[2],\n    cardHint: cardArray[3],\n    cardDecks: cardArray[4].split(\",\"),\n    accuracy: Number(cardArray[5])\n  };\n  return card;\n}","map":{"version":3,"names":["exportPath","arrayEquality","arrayOne","arrayTwo","length","isEqual","map","string","index","cardEquality","cardOne","cardTwo","frontText","backText","cardDecks","cardHint","cardColor","accuracy","deckEquality","deckOne","deckTwo","card","stringToCard","cardArray","split","id","Number"],"sources":["/home/josh/Desktop/COS520/IntegratedJS/TeamC/memento-with-react/src/utils.js"],"sourcesContent":["// import { urlToHttpOptions } from \"url\";\n// import { Card } from \"./interfaces/card\";\n// import * as fs from \"fs\";\n// import * as path from \"path\";\n// import { equal } from \"assert\";\n\nexport const exportPath = \"./exportedCards/\";\n\nexport function arrayEquality(arrayOne, arrayTwo) {\n    if (arrayOne.length !== arrayTwo.length) {\n        return false;\n    };\n    let isEqual = true;\n    arrayOne.map((string, index) => {\n        if (string !== arrayTwo[index]) {\n            isEqual = false;\n        }\n    });\n    return isEqual;\n}\n\nexport function cardEquality(cardOne, cardTwo) {\n    const isEqual =\n        cardOne.frontText === cardTwo.frontText &&\n        cardOne.backText === cardTwo.backText &&\n        arrayEquality(cardOne.cardDecks, cardTwo.cardDecks) &&\n        cardOne.cardHint === cardTwo.cardHint &&\n        cardOne.cardColor === cardTwo.cardColor &&\n        cardOne.accuracy === cardTwo.accuracy;\n    return isEqual;\n}\n\nexport function deckEquality(deckOne, deckTwo) {\n    let isEqual = true;\n    if (deckOne.length === 0 || deckOne.length !== deckTwo.length){\n        isEqual = false;\n    }\n    else {\n        deckOne.map((card, index) => {\n            if (cardEquality(card, deckTwo[index]) !== true) {\n                isEqual = false;\n            }\n        });\n    }\n    return isEqual;\n}\n\n\nexport function stringToCard(string) {\n    const cardArray = string.split(\"<|>\")\n    const card = {\n        // The ID of imported cards needs to be assigned at the time of import based on the collection\n        id: -1,\n        cardColor: cardArray[0],\n        frontText: cardArray[1],\n        backText: cardArray[2],\n        cardHint: cardArray[3],\n        cardDecks: cardArray[4].split(\",\"),\n        accuracy: Number(cardArray[5])\n    }\n    return card;\n}  "],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,UAAU,GAAG,kBAAkB;AAE5C,OAAO,SAASC,aAAa,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAC9C,IAAID,QAAQ,CAACE,MAAM,KAAKD,QAAQ,CAACC,MAAM,EAAE;IACrC,OAAO,KAAK;EAChB;EAAC;EACD,IAAIC,OAAO,GAAG,IAAI;EAClBH,QAAQ,CAACI,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;IAC5B,IAAID,MAAM,KAAKJ,QAAQ,CAACK,KAAK,CAAC,EAAE;MAC5BH,OAAO,GAAG,KAAK;IACnB;EACJ,CAAC,CAAC;EACF,OAAOA,OAAO;AAClB;AAEA,OAAO,SAASI,YAAY,CAACC,OAAO,EAAEC,OAAO,EAAE;EAC3C,MAAMN,OAAO,GACTK,OAAO,CAACE,SAAS,KAAKD,OAAO,CAACC,SAAS,IACvCF,OAAO,CAACG,QAAQ,KAAKF,OAAO,CAACE,QAAQ,IACrCZ,aAAa,CAACS,OAAO,CAACI,SAAS,EAAEH,OAAO,CAACG,SAAS,CAAC,IACnDJ,OAAO,CAACK,QAAQ,KAAKJ,OAAO,CAACI,QAAQ,IACrCL,OAAO,CAACM,SAAS,KAAKL,OAAO,CAACK,SAAS,IACvCN,OAAO,CAACO,QAAQ,KAAKN,OAAO,CAACM,QAAQ;EACzC,OAAOZ,OAAO;AAClB;AAEA,OAAO,SAASa,YAAY,CAACC,OAAO,EAAEC,OAAO,EAAE;EAC3C,IAAIf,OAAO,GAAG,IAAI;EAClB,IAAIc,OAAO,CAACf,MAAM,KAAK,CAAC,IAAIe,OAAO,CAACf,MAAM,KAAKgB,OAAO,CAAChB,MAAM,EAAC;IAC1DC,OAAO,GAAG,KAAK;EACnB,CAAC,MACI;IACDc,OAAO,CAACb,GAAG,CAAC,CAACe,IAAI,EAAEb,KAAK,KAAK;MACzB,IAAIC,YAAY,CAACY,IAAI,EAAED,OAAO,CAACZ,KAAK,CAAC,CAAC,KAAK,IAAI,EAAE;QAC7CH,OAAO,GAAG,KAAK;MACnB;IACJ,CAAC,CAAC;EACN;EACA,OAAOA,OAAO;AAClB;AAGA,OAAO,SAASiB,YAAY,CAACf,MAAM,EAAE;EACjC,MAAMgB,SAAS,GAAGhB,MAAM,CAACiB,KAAK,CAAC,KAAK,CAAC;EACrC,MAAMH,IAAI,GAAG;IACT;IACAI,EAAE,EAAE,CAAC,CAAC;IACNT,SAAS,EAAEO,SAAS,CAAC,CAAC,CAAC;IACvBX,SAAS,EAAEW,SAAS,CAAC,CAAC,CAAC;IACvBV,QAAQ,EAAEU,SAAS,CAAC,CAAC,CAAC;IACtBR,QAAQ,EAAEQ,SAAS,CAAC,CAAC,CAAC;IACtBT,SAAS,EAAES,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;IAClCP,QAAQ,EAAES,MAAM,CAACH,SAAS,CAAC,CAAC,CAAC;EACjC,CAAC;EACD,OAAOF,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}